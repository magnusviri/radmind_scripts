#!/usr/bin/perl -w

use strict;

################################################################################
# Copyright (c) 2011 University of Utah
# All Rights Reserved.
#
# Permission to use, copy, modify, and distribute this software and
# its documentation for any purpose and without fee is hereby granted,
# provided that the above copyright notice appears in all copies and
# that both that copyright notice and this permission notice appear
# in supporting documentation, and that the name of The University
# of Utah not be used in advertising or publicity pertaining to
# distribution of the software without specific, written prior
# permission. This software is supplied as is without expressed or
# implied warranties of any kind.
################################################################################

################################################################################
# diff_transcript.pl
# Version 1.3.3 (2013....)
#  Added unit testing
# Version 1.3.2 (2013.01.25)
#  Added depth hidding
# Version 1.3.1 (2012.04.10)
#  Fixed incorrect sorting
# Version 1.3 (2011.06.28)
#  Added case insensitive compare
# Version 1.2 (2011.03.25)
#  Fixed incorrect sorting of items that had a . vs a / ("dir.bla" vs "dir/").
# Version 1.0.1 (2007.01.29)
#  2007.01.29 - added -f option
#  2006.10.30 - added l option
#  2006.07.05 - Version 1.0
# Compares 2 Radmind transcripts.
#
################################################################################

################################################################################
sub usage {
	print STDERR "$_[0]\n" if $_[0];
	my $myname = `basename $0`;
	chomp $myname;
	print STDERR << "EOF";
Usage: $myname [-togmpdsciIfz] transcript1 transcript2

example: $myname app_version1.T app_version2.T

-h Hide contents of unique directories
-t Ignore type
-o Ignore owner
-g Ignore group
-m Ignore mode (permissions)
-p Ignore mode (permissions)
-d Ignore date
-s Ignore size
-c Ignore checksum
-i Print lines that are identical
-I Case insensitive (same as radmind tools -I)
-f Full transcript line
-U Run unit tests
-z debug

EOF
	exit 1;
}

####################################
# Get ARGs
#
use Getopt::Std;
my $options = {};
getopts("cdfghiImopstUz",$options);

my $debug = 1 if defined $options->{'z'};
if ( $debug ) {
	use Data::Dumper;
}

if ( $options->{'U'} ) {

	my $data = init( $options );
	my ( $file1, $file2 );

	if ( $options->{'I'} ) {
		$file1 =
"d ./a                                  	0755 1065496382    80
#d ./B                                  	0755 1065496382    80
#d ./c                                  	0755 1065496382    80
d ./D                                  	0755 1065496382    80
d ./e                                  	0755 1065496382    80
d ./F                                  	0755 1065496382    80
#d ./g                                  	0755 1065496382    80
#d ./H                                  	0755 1065496382    80
d ./i                                  	0755 1065496382    80
d ./J                                  	0755 1065496382    80
d ./k                                  	0755 1065496382    80
d ./L                                  	0755 1065496382    80
#d ./m                                  	0755 1065496382    80
d ./N                                  	0755 1065496382    80
d ./o                                  	0755 1065496382    80
#d ./P                                  	0755 1065496382    80
d ./q                                  	0755 1065496382    80
";

		$file2 =
"d ./a                                  	0755 1065496382    80
d ./B                                  	0755 1065496382    80
#d ./c                                  	0755 1065496382    80
#d ./D                                  	0755 1065496382    80
d ./e                                  	0755 1065496382    80
d ./F                                  	0755 1065496382    80
d ./g                                  	0755 1065496382    80
d ./H                                  	0755 1065496382    80
#d ./i                                  	0755 1065496382    80
#d ./J                                  	0755 1065496382    80
d ./k                                  	0755 1065496382    80
#d ./L                                  	0755 1065496382    80
d ./m                                  	0755 1065496382    80
#d ./N                                  	0755 1065496382    80
d ./o                                  	0755 1065496382    80
d ./P                                  	0755 1065496382    80
d ./q                                  	0755 1065496382    80
";
	} else {
		$file1 =
"d ./B                                  	0755 1065496382    80
d ./D                                  	0755 1065496382    80
d ./F                                  	0755 1065496382    80
d ./H                                  	0755 1065496382    80
d ./J                                  	0755 1065496382    80
d ./b                                  	0755 1065496382    80
d ./c                                  	0755 1065496382    80
d ./e                                  	0755 1065496382    80
d ./g                                  	0755 1065496382    80
d ./i                                  	0755 1065496382    80
";
		$file2 =
"d ./A                                  	0755 1065496382    80
d ./D                                  	0755 1065496382    80
d ./F                                  	0755 1065496382    80
d ./H                                  	0755 1065496382    80
d ./K                                  	0755 1065496382    80
d ./a                                  	0755 1065496382    80
d ./c                                  	0755 1065496382    80
d ./e                                  	0755 1065496382    80
d ./g                                  	0755 1065496382    80
d ./i                                  	0755 1065496382    80
";

	}
	my @t1 = split( /\n/, $file1 );
	my @t2 = split( /\n/, $file2 );
	my ( $t1_counter, $t2_counter ) = ( 0, 0 );
	scan( $data, sub { return $t1[$t1_counter++]; }, sub { return $t2[$t2_counter++]; } )

} else {
	my $data = init( $options );
	if ( $ARGV[0] and $ARGV[1] ) {
		if ( -e $ARGV[0] and -e $ARGV[1] ) {
			scan_files( $data, $ARGV[0], $ARGV[1] );
		} else {
			if ( ! -e $ARGV[0] and ! -e $ARGV[0] ) {
				usage( "Couldn't find $ARGV[0] and $ARGV[1]." );
			} elsif ( ! -e $ARGV[0] ) {
				usage( "Couldn't find $ARGV[0]." );
			} else {
				usage( "Couldn't find $ARGV[1]." );
			}
		}
	} else {
		usage( "Specify 2 files to compare." );
	}
}

################################################################################

sub scan_files {
	my ( $data, $t1, $t2 ) = @_;
	if ( ! -e $t1 or ! -e $t2 ) {
		if ( ! -e $t1 and ! -e $t2 ) {
			print STDERR "Couldn't find $t1 and $t2.\n";
		} elsif ( ! -e $t1 ) {
			print STDERR "Couldn't find $t1.\n";
		} else {
			print STDERR "Couldn't find $t2.\n";
		}
		usage();
	}

	if ( open T1, "< $t1" ) {
		if ( open T2, "< $t2" ) {
			scan( $data, sub { my $line = <T1>; return $line; }, sub { my $line = <T2>; return $line; } );
			close T2;
		} else {
			die "Could not open $t2: $!";
		}
		close T1;
	} else {
		die "Could not open $t1: $!";
	}
}

sub init {
	my ( $options ) = @_;
	return {
		't1_advance' => 1,
		't2_advance' => 1,
		't1_eof' => 0,
		't2_eof' => 0,
		'lastdiff' => 0,
		'currentdiff' => "",
		'bucket_contents' => [],
		'ignore_type' => ( $$options{'t'} ) ? 1 : 0,
		'ignore_owner' => ( $$options{'o'} ) ? 1 : 0,
		'ignore_group' => ( $$options{'g'} ) ? 1 : 0,
		'ignore_perms' => ( $$options{'m'} or $$options{'p'} ) ? 1 : 0,
		'ignore_date' => ( $$options{'d'} ) ? 1 : 0,
		'ignore_size' => ( $$options{'s'} ) ? 1 : 0,
		'ignore_cksum' => ( $$options{'c'} ) ? 1 : 0,
		'print_full_transcript_line' => ( $$options{'f'} ) ? 1 : 0,
		'print_same_lines' => ( $$options{'i'} ) ? 1 : 0,
		'case_insensitive' => ( $$options{'I'} ) ? 1 : 0,
		'hide_unique_folder_contents' => ( $$options{'h'} ) ? 1 : 0,
	};
}

sub scan {
	my ( $data, $getNextLine1, $getNextLine2 ) = @_;
	my ( $t1_previous_path, $t2_previous_path, $t1_item, $t2_item, $line1, $line2 );
	my $scan = 1;
	while ( $scan ) {
		$$data{'lastdiff'} = $$data{'currentdiff'};

		print "\n" if $debug;
		print "----------------------\n" if $debug;
		print Dumper($data) if $debug;

		#################################
		# Get the next valid radmind line

		if ( $$data{'t1_advance'} ) {
			my $keepscanning = 1;
			while ($keepscanning) {
				if ( $line1 = $getNextLine1->() ) {
					$t1_item = parse_radmind_line($line1);
					if ( $t1_item->{'path'} ne "" ) { $keepscanning = 0; }
				} else {
					$$data{'t1_eof'} = 1;
					$keepscanning = 0;
				}
			}
		}
		if ( $$data{'t2_advance'} ) {
			my $keepscanning = 1;
			while ($keepscanning) {
				if ( $line2 = $getNextLine2->() ) {
					$t2_item = parse_radmind_line($line2);
					if ( $t2_item->{'path'} ne "" ) { $keepscanning = 0; }
				} else {
					$$data{'t2_eof'} = 1;
					$keepscanning = 0;
				}
			}
		}

		if ( $debug ) {
			chomp $line1;
			chomp $line2;
			print "1: $line1\n2: $line2\n";
# 				print Dumper($t1_item);# if $debug;
# 				print Dumper($t2_item);# if $debug;
		}

		#################################
		# Compare the results

		if ( $$data{'t1_eof'} and $$data{'t2_eof'} ) {

			#################################
			# End of compare reached

			$scan = 0;

		} elsif ( $$data{'t1_eof'} ) {

			#################################
			# File 1 end reached

			add_to_bucket( $data, ">", $t2_item, $line2 );
			$$data{'t1_advance'} = 0;
			$$data{'t2_advance'} = 1;

		} elsif ( $$data{'t2_eof'} ) {

			#################################
			# File 2 end reached

			add_to_bucket( $data, "<", $t1_item, $line1 );
			$$data{'t1_advance'} = 1;
			$$data{'t2_advance'} = 0;

		} else {

			my @items1 = @{$t1_item->{'splitpath'}};
			my @items2 = @{$t2_item->{'splitpath'}};
			print "$t1_item->{'realpath'} vs $t2_item->{'realpath'}\n" if $debug;


#
# 			if ( $t1_previous_path ) {
# 				my $compare = compare_paths( $$data{'case_insensitive'}, $t1_previous_path, \@items1 );
# 				if ( $compare != -1 ) {
# 					print "Error! $compare\n";
# 				}
# 			} else {
# 				$t1_previous_path = \@items1;
# 			}
# 			if ( $t2_previous_path ) {
# 				my $compare = compare_paths( $$data{'case_insensitive'}, $t2_previous_path, \@items2 );
# 				if ( $compare != -1 ) {
# 					print "Error! $compare\n";
# 				}
# 			} else {
# 				$t2_previous_path = \@items1;
# 			}



			my $compare = compare_paths( $$data{'case_insensitive'}, \@items1, \@items2 );
			if ( $compare == 1 ) {

				#################################
				# Line present in file 2 that isn't in file 1

				add_to_bucket( $data, ">", $t2_item, $line2 );
				$$data{'t1_advance'} = 0;
				$$data{'t2_advance'} = 1;

			} elsif ( $compare == -1 ) {

				#################################
				# Line present in file 1 that isn't in file 2

				add_to_bucket( $data, "<", $t1_item, $line1 );
				$$data{'t1_advance'} = 1;
				$$data{'t2_advance'} = 0;

			} elsif ( $compare == 0 ) { #equal

				#################################
				# Matching Lines

				my $diff_found = 0;
				my @differences = ();
				$$data{'last_shared_path'} = $t1_item->{'realpath'};
				while (($a) = each %$t1_item ) {
					if ( $a eq "splitpath" or
							$$data{'ignore_type'} and $a eq "filetype" or
							$$data{'ignore_owner'} and $a eq "owner" or
							$$data{'ignore_group'} and $a eq "group" or
							$$data{'ignore_perms'} and $a eq "perms" or
							$$data{'ignore_date'} and $a eq "modtime" or
							$$data{'ignore_size'} and $a eq "size" or
							$$data{'ignore_cksum'} and $a eq "checksum") {
						next;
					}

					my $different;
					if ( $$data{'case_insensitive'} and ( $a eq "realpath" or $a eq "path" ) ) {
						$different = ! ( my_eq( $data, $t1_item->{$a}, $t2_item->{$a} ) );
					} else {
						$different = $t1_item->{$a} ne $t2_item->{$a}
					}

					if ( $different ) {
						push @differences, "$a: $t1_item->{$a} != $t2_item->{$a};";
						$diff_found = 1;
					}
				}
				if ( $diff_found ) {
					add_to_bucket( $data, "!", $t1_item, $line1, \@differences );
				} else {
					add_to_bucket( $data, "=", $t1_item, $line1 );
				}

				$$data{'t1_advance'} = 1;
				$$data{'t2_advance'} = 1;

			} else {
				die "$t1_item->{'path'} ?? $t2_item->{'path'}\n";
			}

		}
		print Dumper($data) if $debug;
	}
	close T2;
	print_bucket( $data, 0 );
}

sub add_to_bucket {
	my ( $data, $type, $item, $line, $diffs ) = @_;
	$$data{'currentdiff'} = $type;
	if ( $$data{'lastdiff'} and $$data{'currentdiff'} ne $$data{'lastdiff'} ) {
		print_bucket( $data, 1 );
	}
	chomp $line;
	my $new_item = {
		'type' => $type,
		'line' => $line,
		'realpath' => $$item{'realpath'},
		'last_shared_path' => $$data{'last_shared_path'},
	};
	$$new_item{'diffs'} = $diffs if $diffs;
	push @{$$data{'bucket_contents'}}, $new_item;
}

sub print_bucket {
	my ( $data, $print_separator ) = @_;

	my @hidden_messages = ();
	my $last_printed_path = $data->{'bucket_contents'}->[0]->{'last_shared_path'};
	my @last_printed = split /\//, $last_printed_path if $last_printed_path;

	foreach my $item ( @{$data->{'bucket_contents'}} ) {
		my $print_message = 1;
		if ( $$data{'hide_unique_folder_contents'} and ( $$item{'type'} eq ">" or $$item{'type'} eq "<" ) ) {
			my @current_path = split /\//, $$item{'realpath'};
			if ( $#last_printed + 1 != $#current_path ) {
				if ( $$item{'realpath'} =~ /^$last_printed_path\// ) {
					$print_message = 0;
				}
			}
		}

		# Print the message
		my $message;
		if ( $$item{'type'} ne "=" or $$data{'print_same_lines'} ) {
			if ( $$data{'print_full_transcript_line'} ) {
				$message = "$$item{'type'} $$item{'line'}";
			} else {
				$message = "$$item{'type'} $$item{'realpath'}";
			}
			my $diffs = $$item{'diffs'};
			if ( $diffs ) {
				$message .= " - @$diffs";
			}
			if ( $print_message ) {
				if ( $#hidden_messages >= 0 ) {
					print "Hidden files: ".($#hidden_messages+1)."\n";
					@hidden_messages = ();
				}
				print "$message\n";
				$last_printed_path = $$item{'realpath'};
			} elsif ( $debug ) {
				print "\t$message\n";
			} else {
				push @hidden_messages, $message;
			}
		} else {
			$print_separator = 0;
		}
	}
	if ( $#hidden_messages >= 0 ) {
		print "Hidden files: ".($#hidden_messages+1)."\n";
	}
	print "--\n" if $print_separator;
	$$data{'bucket_contents'} = [];
}

sub compare_paths {
	my ( $case_insensitive, $p1, $p2 ) = @_;
	my @parts1 = @$p1;
	my @parts2 = @$p2;
	my $part1 = shift @parts1;
	my $part2 = shift @parts2;
	if ( my_eq ( $case_insensitive, $part1, $part2 ) ) {
		if ( $#parts1 >= 0 ) {
			if ( $#parts2 >= 0 ) {
				return compare_paths( $case_insensitive, \@parts1, \@parts2 );
			} else {
				return 1;
			}
		} elsif ( $#parts2 >= 0 ) {
			return -1;
		} else {
			return 0;
		}
	} else {
		if ( my_gt( $case_insensitive, $part1, $part2 ) ) {
			return 1;
		} else {
			return -1;
		}
	}
}

sub my_gt {
	my ( $case_insensitive, $t1, $t2 ) = @_;
	if ( $case_insensitive ) {
		return lc( $t1 ) gt lc( $t2 );
	} else {
		return $t1 gt $t2;
	}
}

sub my_lt {
	my ( $case_insensitive, $t1, $t2 ) = @_;
	if ( $case_insensitive ) {
		return lc( $t1 ) lt lc( $t2 );
	} else {
		return $t1 lt $t2;
	}
}

sub my_eq {
	my ( $case_insensitive, $t1, $t2 ) = @_;
	if ( $case_insensitive ) {
		my $equal = ( lc( $t1 ) eq lc( $t2 ) );
		print "			lc($t1) eq lc($t2) = $equal.\n" if $debug;
		return $equal;
	} else {
		my $equal = $t1 eq $t2;
		print "			$t1 eq $t2 = $equal.\n" if $debug;
		return $equal;
	}
}

sub parse_radmind_line {
	my ( $line ) = @_;

	my %radmind_line = ();

	# check for comment
	if ( ( substr $line, 0, 1 ) eq "#" ) {
		$radmind_line{'comment'} = substr $line, 1, length ($line)-1;
		$radmind_line{'path'} = '';
	} else {

		my @theLine = split (' ', $line);

		# check for minus
		if ( $theLine[0] eq "-" ) {
			shift @theLine;
			$radmind_line{'minus'} = 1;
		}

		# check for plus (even needed?)
		if ( $theLine[0] eq "+" ) {
			shift @theLine;
			$radmind_line{'plus'} = 1;
		}

		$radmind_line{'filetype'} = shift @theLine;

		$radmind_line{'path'} = shift @theLine;
		$radmind_line{'realpath'} = unescape_radmind_path ( $radmind_line{'path'} );
		my @bla = split ( /\//, $radmind_line{'realpath'} );
		$radmind_line{'splitpath'} = \@bla;

		if ( ( substr $radmind_line{'path'}, 0, 1 ) eq "." ) {
			$radmind_line{'relativepath'} = 1;
		} elsif ( ( substr $radmind_line{'path'}, 0, 1 ) eq "/" ) {
			$radmind_line{'absolutepath'} = 1;
		}

		if ( $radmind_line{'filetype'} eq "l" ) {

			if ( $#theLine > 2 ) {
				$radmind_line{'perms'} = shift @theLine;
				$radmind_line{'owner'} = shift @theLine;
				$radmind_line{'group'} = shift @theLine;
			}

			$radmind_line{'linkpath'} = shift @theLine;

		} elsif ( $radmind_line{'filetype'} eq "h" ) {

			$radmind_line{'linkpath'} = shift @theLine;

		} else {

			$radmind_line{'perms'} = shift @theLine;
			$radmind_line{'owner'} = shift @theLine;
			$radmind_line{'group'} = shift @theLine;

			if ( $radmind_line{'filetype'} ne "d" ) {

				$radmind_line{'modtime'} = shift @theLine;
				$radmind_line{'size'} = shift @theLine;
				$radmind_line{'checksum'} = shift @theLine;

			} elsif ( $#theLine > 0 ) {

				$radmind_line{'appleinfo'} = shift @theLine;

			}


		}
	}

	return \%radmind_line;

}

sub unescape_radmind_path {
	my ( $path ) = @_;
	$path =~ s/\\b/ /g;
#	my $path =~ s/\\t/\t/g;; # convert tabs
#	my $path =~ s/\\n/\n/g;; # convert newline
#	my $path =~ s/\\r/\r/g;; # convert return
#	my $path =~ s/\\/\/g;; # convert backslashes
	return $path;
}
